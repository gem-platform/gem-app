sudo: required

addons:
  apt:
    packages:
      # This is required to run new chrome on old trusty
      - libnss3

env:
  DOCKER_COMPOSE_VERSION: 1.23.2

services:
  - xvfb

notifications:
  slack: gem-platform:qcZliEfmuv0z4QArgAEJjx8G

node_js:
  - "11"

cache:
  npm: true
  directories:
    - $HOME/.npm

before_install:
  - ls $HOME/.npm

  # Enable user namespace cloning
  - sysctl kernel.unprivileged_userns_clone=1

  - sudo /etc/init.d/mysql stop
  - sudo /etc/init.d/postgresql stop
  # update is required to update the repositories to see the new packages for
  # Docker.
  # - sudo apt-get update

  # Now we can install the newer docker-engine which is required for the newer
  # docker-composer we will install next. The messy options are to force it to
  # be non-interactive (normally it asks you a bunch of config questions).
  # - sudo apt-get install -o Dpkg::Options::="--force-confold" --force-yes -y docker-engine

  # Print out the current docker-compose version. Once this reports 1.6+ then we
  # do not need the following steps.
  - docker-compose --version

  # As of the writing of this script Travis has docker-compose v1.4.2, we need
  # to update it to 1.8+. $DOCKER_COMPOSE_VERSION is provide from the `env`
  # above.
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin

  # Check that docker-compose is now running the latest version (or at least the
  # one we specified). This is not to be confused with the version we printed
  # before doing the update.
  - docker-compose --version

  # Setup your application stack. You may need to tweak these commands if you
  # doing out-of-the-ordinary docker-compose builds.
  - (cd gem && docker-compose -f ./docker-compose.yml -f ./docker-compose.ci.yml build)
  - (cd gem && docker-compose -f ./docker-compose.yml -f ./docker-compose.ci.yml up -d)

  # You will want this for logging. If one of your containers does not build for
  # whatever reason it's best to report that now before your tests start
  # otherwise it can be really tricky to debug why tests are failing sometimes.
  - docker ps
  - docker network ls
  - (cd gem && docker-compose ps)

  - npm i -g npm codecov
  - (cd e2e && npm ci)
  - (cd gem && chmod +x ./wait.sh && ./wait.sh)

script:
  - (cd gem && docker-compose exec gem-app bash -c "pytest --cov=. && cd .. && cp ./app/.coverage . && coverage xml -o /coverage/coverage.xml")
  - (cd coverage/apps/gem && ls && npx codecov --token=$CODECOV_TOKEN --root="." -F unit)

  - (cd gem && docker-compose exec gem-client npm run test:unit -- --coverage --coverageDirectory=/coverage)
  - (cd coverage/clients/gem && ls && npx codecov --token=$CODECOV_TOKEN --root="." -F unit)

  - (cd e2e && npx codeceptjs run)